# -*- coding: utf-8 -*-
"""Covoit

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZWJ_kUyKLs42mGNANMF-EoSpX5cJFetu
"""

!pip install geopandas

import geopandas as gpd
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

covoit = gpd.read_file('https://www.data.gouv.fr/fr/datasets/r/3c845ee9-6dba-4e87-8226-eb81b2424113')

pistes_cyclables = gpd.read_file('https://www.data.gouv.fr/fr/datasets/r/7daa40cf-edde-4f64-9963-e3092a2e2b30')

import requests
import tempfile
import zipfile

temporary_location = tempfile.gettempdir()
#Méthodes utilisées dans le TP de géopandas
def download_unzip(url, dirname = tempfile.gettempdir(), destname = "borders"):
  myfile = requests.get(url)
  open(dirname + '/' + destname + '.zip', 'wb').write(myfile.content)
  with zipfile.ZipFile(dirname + '/' + destname + '.zip', 'r') as zip_ref:
      zip_ref.extractall(dirname + '/' + destname)

download_unzip('https://www.data.gouv.fr/fr/datasets/r/07b7c9a2-d1e2-4da6-9f20-01a7b72d4b12')
communes_borders = gpd.read_file(temporary_location + "/borders/communes-20190101.json")

#On index par rapport au numéro des départements
#On ne garde que les deux départements de Corse qui nous intéressent
data_borders = communes_borders.set_index('insee')
data_borders['dep'] = data_borders.index.str[:2]
communes_corses = data_borders.loc[data_borders['dep'].isin(['2A','2B'])].plot(color='0.8', edgecolor='black')

fig, ax = plt.subplots()
data_borders.loc[data_borders['dep'].isin(['2A', '2B'])].plot(ax=ax, color='white', edgecolor='0.5')
covoit.plot(ax=ax, color='green')
plt.show()

#pas sure que le nombre de places représente vraiment quelque chose : il faudrait avoir des données sur la fréquentation des stations
covoit.sort_values(by = 'places', ascending = False).head(5)

covoit.groupby('nom_com').sum().sort_values(by = 'places', ascending = False).head(5)

covoit.groupby('type').count()
#P+R = Lieu aménagé à proximité d'un arrêt de transport public, 
#destiné à inciter un automobiliste à garer son véhicule pour emprunter ensuite un moyen de transport en commun.

covoit[covoit['type'].isin(['P+R'])].plot()

#aires avec vélos
velo = covoit[covoit['velo'].isin(['Oui'])]

#covoit avec intermodalité : on enlève les NaN et les sans intermodalité
covoit.groupby('tc').count()
intermod = covoit[covoit['tc'].notna()]
intermod = intermod[~intermod['tc'].isin(['Non'])]
intermod.plot()

#station avec vélos/train/bus
fig, ax = plt.subplots()
covoit.plot(ax=ax,color = 'white', edgecolor = 'grey', alpha = 0.5)
velo.plot(ax=ax, edgecolor = "red", markersize = 100)
intermod.plot(ax=ax, color = 'green', marker = '+')
plt.show()

"""**Que ce soit sur P+R ou sur train/bus : les aires concernées sont très centrées sur Ajaccio/Bastia et le reste de l'île est assez "vide"**"""

#on essaye de voir les endroits où il y a des pistes cyclables et des aires de covoit : 
fig, ax = plt.subplots()
data_borders.loc[data_borders['dep'].isin(['2A', '2B'])].plot(ax=ax, color='white', edgecolor='0.5')
pistes_cyclables.plot(ax=ax, color='red', markersize=5)
covoit.plot(ax=ax, color='green')
plt.show()

#on essaye de ne garder que les endroit où il y a les deux : 
ville = covoit['nom_com']
pistes = pistes_cyclables[pistes_cyclables['nom_commune'].isin(ville)]
villes = pistes_cyclables['nom_commune']
cocovoit = covoit[covoit['nom_com'].isin(villes)]
#on pourrait trouver une manière plus élégante de le faire en prenant l'intersection des listes correspondant au nom des communes je pense

fig, ax = plt.subplots()
data_borders.loc[data_borders['dep'].isin(['2A', '2B'])].plot(ax=ax, color='white', edgecolor='0.5')
pistes.plot(ax=ax, color='red', markersize=5)
cocovoit.plot(ax=ax, color='green')
plt.show()

#j'ai tenté un merge pour la forme : 
both = covoit.merge(pistes_cyclables, how = 'inner', left_on = 'nom_com', right_on = 'nom_commune')
del both['nom_commune']
both.groupby('nom_com').count()
#nous donne la liste des villes où il y a à la fois des aires de covoit et des pistes cyclables

#on affiches les communes où il y a à la fois des aires de covoiturage et des pistes cyclables
communes = communes_borders[communes_borders['nom'].isin(both['nom_com'])]
fig, ax = plt.subplots()
data_borders.loc[data_borders['dep'].isin(['2A', '2B'])].plot(ax=ax, color='white', edgecolor='0.5')
communes.plot(ax=ax, color = 'purple', alpha = 0.5)
plt.show()